// import { Injectable } from "@nestjs/common";
// import { InjectModel } from "@nestjs/mongoose";
// import { Model } from "mongoose";
// import { Context, Markup, Telegraf } from "telegraf";
// import { InjectBot } from "nestjs-telegraf";
// import { Bot, BotDocument } from "./schema/bot.schema";
// import { BOT_NAME } from "name-bot";
// import { Address } from "./schema/bot.location";
// import { Message } from "telegraf/typings/core/types/typegram"; // kerak bo'ladi

// @Injectable()
// export class BotService {
//   constructor(
//     @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>,
//     @InjectBot(BOT_NAME) private readonly bot: Telegraf<Context>,
//     @InjectModel(Address.name)
//     private readonly addressModel: Model<Address>
//   ) {}

//   async start(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!user_id) return;

//       const user = await this.botModel.findOne({ user_id });

//       if (!user) {
//         await this.botModel.create({
//           user_id: user_id,
//           user_name: ctx.from?.username ?? "",
//           first_name: ctx.from?.first_name ?? "",
//           last_name: ctx.from?.last_name ?? "",
//           lang: ctx.from?.language_code ?? "",
//           status: false,
//           phone_number: "",
//           location: "",
//           // last_state: "phone"
//         });

//         await ctx.replyWithHTML(
//           `Iltimos, <b> üìû Telefon raqamni yuborish</b> tugmasini bosing`,
//           Markup.keyboard([
//             [Markup.button.contactRequest("Telefon raqamni yuborish")],
//           ])
//             .oneTime()
//             .resize()
//         );
//       } else if (!user.status || !user.phone_number) {
//         await ctx.replyWithHTML(
//           `Iltimos, <b>Telefon raqamni yuborish</b> tugmasini bosing`,
//           Markup.keyboard([
//             [Markup.button.contactRequest("Telefon raqamni yuborish")],
//           ])
//             .oneTime()
//             .resize()
//         );
//       } else {
//         await ctx.replyWithHTML(
//           "Bu botga xush kelibsiz!",
//           Markup.removeKeyboard()
//         );
//       }
//     } catch (error) {
//       console.error(`Error on Start`, error);
//     }
//   }

//   async onContact(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       const user = await this.botModel.findOne({ user_id });
//       if (!user) {
//         await ctx.replyWithHTML(`Iltimos, <b>start</b> tugmasini bosing`, {
//           ...Markup.keyboard([["/start"]])
//             .oneTime()
//             .resize(),
//         });
//       } else if (user.phone_number) {
//         await this.bot.telegram.sendChatAction(user_id!, "typing");
//         await ctx.replyWithHTML(
//           "savol nechimarta kontakt jo'natmoqchisiz a ü§®",
//           { ...Markup.removeKeyboard() }
//         );
//       } else if (
//         "contact" in ctx.message! &&
//         ctx.message!.contact.user_id != user_id
//       ) {
//         await ctx.replyWithHTML(`Iltimos o'zingizni telefon raqamni yuboring`, {
//           ...Markup.keyboard([
//             [Markup.button.contactRequest("üìû Telefon raqamni yuborish")],
//           ])
//             .oneTime()
//             .resize(),
//         });
//       } else if ("contact" in ctx.message!) {
//         let phone = ctx.message.contact.phone_number;
//         if (phone[0] != "+") {
//           phone = "+" + phone;
//         }
//         user.phone_number = phone;
//         user.status = true;
//         await user.save();
//         await ctx.replyWithHTML(`Iltimos, ismingizni kiriting:`, {
//           ...Markup.removeKeyboard(),
//         });
//       }
//     } catch (error) {
//       console.log(`Error on Contact`, error);
//     }
//   }

//   async onName(ctx: Context) {
//     const user = ctx.from;

//     if (!ctx.message || !user) {
//       return ctx.reply(
//         "Noto‚Äòg‚Äòri xabar formati yoki foydalanuvchi aniqlanmadi."
//       );
//     }

//     if (!("text" in ctx.message)) {
//       return ctx.reply(
//         "‚ùå Iltimos, faqat matn yuboring. Sticker, rasm yoki gif emas."
//       );
//     }

//     const message = ctx.message.text.trim();
//     const user_id = user.id;

//     if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(message)) {
//       return ctx.reply(
//         "‚ùå Iltimos, haqiqiy ismingizni yuboring. Emoji, raqam yoki belgilar emas."
//       );
//     }

//     const existingUser = await this.botModel.findOne({ user_id });

//     if (existingUser) {
//       if (!existingUser.name) {
//         existingUser.set({ name: message });
//         await existingUser.save();
//         await ctx.reply(`‚úÖ ${message} ismingiz saqlandi.`);

//         // Lokatsiya tugmasini yuborish
//         return ctx.reply("üìç Endi joylashuvingizni yuboring:", {
//           reply_markup: {
//             keyboard: [
//               [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//             ],
//             resize_keyboard: true,
//             one_time_keyboard: true,
//           },
//         });
//       } else {
//         return ctx.reply(
//           `Siz allaqachon ro'yxatdan o'tgansiz. Ismingiz: ${existingUser.name}`
//         );
//       }
//     } else {
//       await this.botModel.create({
//         user_id: user.id,
//         user_name: user.username ?? "",
//         name: message,
//         first_name: user.first_name ?? "",
//         last_name: user.last_name ?? "",
//         lang: user.language_code ?? "",
//       });

//       await ctx.reply(`‚úÖ Ismingiz qabul qilindi: ${message}`);

//       // Lokatsiya tugmasini yuborish
//       return ctx.reply("üìç Endi joylashuvingizni yuboring:", {
//         reply_markup: {
//           keyboard: [
//             [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//           ],
//           resize_keyboard: true,
//           one_time_keyboard: true,
//         },
//       });
//     }
//   }

//   async onLocation(ctx: Context) {
//     try {
//       console.log("üìç Location handler started");

//       if (!ctx.message || !("location" in ctx.message)) {
//         console.log("üö´ No location in message:", ctx.message);
//         return ctx.reply(
//           "‚ùóÔ∏è Iltimos, pastdagi tugma orqali lokatsiyangizni yuboring."
//         );
//       }

//       const user_id = ctx.from?.id;
//       if (!user_id) {
//         console.log("üö´ User ID not found in ctx");
//         return ctx.reply("Foydalanuvchi aniqlanmadi.");
//       }

//       const user = await this.botModel.findOne({ user_id });
//       if (!user) {
//         console.log("üö´ User not found in DB:", user_id);
//         return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
//       }

//       const latitude = ctx.message.location.latitude;
//       const longitude = ctx.message.location.longitude;
//       const location = `${latitude},${longitude}`;
//       console.log("‚úÖ Received location:", location);

//       user.location = location;
//       await user.save();

//       console.log("‚úÖ Location saved to user model:", user);

//       await ctx.reply("‚úÖ Joylashuvingiz muvaffaqiyatli saqlandi!");
//     } catch (error) {
//       console.error("‚ùå onLocation error:", error);
//       await ctx.reply("‚ùå Xatolik yuz berdi. Iltimos, qayta urinib ko'ring.");
//     }
//   }
// }

///////////////////////////////////////////////////////////////////

import { Injectable } from "@nestjs/common";
import { Context, Markup } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  // /start komandasi
  async start(ctx: Context) {
    await ctx.reply("Assalomu alaykum! Telefon raqamingizni yuboring:", {
      reply_markup: {
        keyboard: [
          [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  // Telefon raqamini qabul qilish
  async onContact(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) {
      return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
    }

    if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
      const contact = ctx.message.contact;
      let user = await this.botModel.findOne({ user_id });

      if (user) {
        user.phone_number = contact.phone_number;
        await user.save();
      } else {
        await this.botModel.create({
          user_id,
          phone_number: contact.phone_number,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });
      }

      await ctx.reply("‚úÖ Endi ismingizni yuboring:", {
        reply_markup: { remove_keyboard: true },
      });
    } else {
      await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
    }
  }

  // Ismni qabul qilish
  async onName(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) return;

    if ("text" in ctx.message && typeof ctx.message.text === "string") {
      const text = ctx.message.text.trim();

      if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
        return ctx.reply(
          "‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing."
        );
      }

      const existingUser = await this.botModel.findOne({ user_id });

      if (existingUser) {
        if (!existingUser.name) {
          existingUser.name = text;
          await existingUser.save();
          await ctx.reply(`‚úÖ Ismingiz saqlandi: ${text}`);
        }
      } else {
        await this.botModel.create({
          user_id,
          name: text,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });

        await ctx.reply(`‚úÖ Ismingiz saqlandi: ${text}`);
      }

      // Lokatsiya so‚Äòrash
      await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else {
      await ctx.reply("‚ùå Iltimos, faqat matn yuboring.");
    }
  }

  // Joylashuvni qabul qilish
  async onLocation(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) {
      return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
    }

    // Faqat location kelgandagina saqlaymiz
    if ("location" in ctx.message && ctx.message.location) {
      const { latitude, longitude } = ctx.message.location;
      const user = await this.botModel.findOne({ user_id });

      if (!user) {
        return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
      }

      const location = `${latitude},${longitude}`;
      user.location = location;
      await user.save();

      await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");
      return this.kasallikniSozlash(ctx);
    }

    // ‚ö†Ô∏è Aks holda noto‚Äòg‚Äòri xabar yuborilgan bo‚Äòladi (matn, sticker, rasm...)
    // return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
    //   reply_markup: {
    //     keyboard: [
    //       [{ text: "üìç Joylashuvni yuborish", request_location: true }],
    //     ],
    //     resize_keyboard: true,
    //     one_time_keyboard: true,
    //   },
    // });
    return ctx.reply("Yo lokatsiya ");
  }

  // Kasallik haqida tugmalar
  async kasallikniSozlash(ctx: Context) {
    await ctx.reply("ü©∫ Sizda hozirda biron kasallik bormi?", {
      reply_markup: {
        keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  // Matnli javoblar uchun umumiy handler
  async handleText(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!ctx.message || !("text" in ctx.message)) return;
    const text = ctx.message.text.trim();
    if (!user_id || !text) return;

    const user = await this.botModel.findOne({ user_id });

    // Ism hali yo‚Äòq bo‚Äòlsa, ismni saqlash
    if (user && !user.name) {
      return this.onName(ctx);
    }

    // ‚ùå Yo‚Äòq -> sog'lom deb saqlash
    if (text === "‚ùå Yo‚Äòq") {
      if (user) {
        user.illness = "sog'lom";
        await user.save();
      }
      await ctx.reply("‚úÖ Siz sog'lom deb belgilandingiz.", {
        reply_markup: Markup.removeKeyboard().reply_markup,
      });
      return this.nextStep(ctx);
    }

    // ‚úÖ Ha -> kasallik so‚Äòrash
    if (text === "‚úÖ Ha") {
      this.kasallikMap.set(user_id, true); // ‚û§ Bu foydalanuvchidan kasallik haqida matn kutamiz degani
      return ctx.reply(
        "üìù Qanday kasallik borligini yozing (masalan: gripp, allergiya)",
        { reply_markup: Markup.removeKeyboard().reply_markup } // ‚û§ Keyboard'ni tozalab yuborish
      );
    }

    // Foydalanuvchi kasallik nomini yozgan bo‚Äòlsa
    if (this.kasallikMap.has(user_id)) {
      if (user) {
        user.illness = text; // qanday yozgan bo‚Äòlsa, shunday saqlaymiz
        await user.save();
        this.kasallikMap.delete(user_id);
        await ctx.reply(`‚úÖ Kasalligingiz saqlandi: ${text}`);
        return this.nextStep(ctx);
      }
    }
    return ctx.reply("‚ùì Noma'lum buyruq. Iltimos, tugmani bosing !");
  }

  // Keyingi bosqich (kelajakda xizmat turi, manzil, va h.k.)
  async nextStep(ctx: Context) {
    await ctx.reply(
      "üöÄ Ro‚Äòyxatdan o‚Äòtish tugadi! Yaqinda xizmatni boshlaysiz."
    );
  }
}
