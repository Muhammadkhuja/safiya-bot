// import { Injectable } from "@nestjs/common";
// import { InjectModel } from "@nestjs/mongoose";
// import { Model } from "mongoose";
// import { Context, Markup, Telegraf } from "telegraf";
// import { InjectBot } from "nestjs-telegraf";
// import { Bot, BotDocument } from "./schema/bot.schema";
// import { BOT_NAME } from "name-bot";
// import { Address } from "./schema/bot.location";
// import { Message } from "telegraf/typings/core/types/typegram"; // kerak bo'ladi

// @Injectable()
// export class BotService {
//   constructor(
//     @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>,
//     @InjectBot(BOT_NAME) private readonly bot: Telegraf<Context>,
//     @InjectModel(Address.name)
//     private readonly addressModel: Model<Address>
//   ) {}

//   async start(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!user_id) return;

//       const user = await this.botModel.findOne({ user_id });

//       if (!user) {
//         await this.botModel.create({
//           user_id: user_id,
//           user_name: ctx.from?.username ?? "",
//           first_name: ctx.from?.first_name ?? "",
//           last_name: ctx.from?.last_name ?? "",
//           lang: ctx.from?.language_code ?? "",
//           status: false,
//           phone_number: "",
//           location: "",
//           // last_state: "phone"
//         });

//         await ctx.replyWithHTML(
//           `Iltimos, <b> üìû Telefon raqamni yuborish</b> tugmasini bosing`,
//           Markup.keyboard([
//             [Markup.button.contactRequest("Telefon raqamni yuborish")],
//           ])
//             .oneTime()
//             .resize()
//         );
//       } else if (!user.status || !user.phone_number) {
//         await ctx.replyWithHTML(
//           `Iltimos, <b>Telefon raqamni yuborish</b> tugmasini bosing`,
//           Markup.keyboard([
//             [Markup.button.contactRequest("Telefon raqamni yuborish")],
//           ])
//             .oneTime()
//             .resize()
//         );
//       } else {
//         await ctx.replyWithHTML(
//           "Bu botga xush kelibsiz!",
//           Markup.removeKeyboard()
//         );
//       }
//     } catch (error) {
//       console.error(`Error on Start`, error);
//     }
//   }

//   async onContact(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       const user = await this.botModel.findOne({ user_id });
//       if (!user) {
//         await ctx.replyWithHTML(`Iltimos, <b>start</b> tugmasini bosing`, {
//           ...Markup.keyboard([["/start"]])
//             .oneTime()
//             .resize(),
//         });
//       } else if (user.phone_number) {
//         await this.bot.telegram.sendChatAction(user_id!, "typing");
//         await ctx.replyWithHTML(
//           "savol nechimarta kontakt jo'natmoqchisiz a ü§®",
//           { ...Markup.removeKeyboard() }
//         );
//       } else if (
//         "contact" in ctx.message! &&
//         ctx.message!.contact.user_id != user_id
//       ) {
//         await ctx.replyWithHTML(`Iltimos o'zingizni telefon raqamni yuboring`, {
//           ...Markup.keyboard([
//             [Markup.button.contactRequest("üìû Telefon raqamni yuborish")],
//           ])
//             .oneTime()
//             .resize(),
//         });
//       } else if ("contact" in ctx.message!) {
//         let phone = ctx.message.contact.phone_number;
//         if (phone[0] != "+") {
//           phone = "+" + phone;
//         }
//         user.phone_number = phone;
//         user.status = true;
//         await user.save();
//         await ctx.replyWithHTML(`Iltimos, ismingizni kiriting:`, {
//           ...Markup.removeKeyboard(),
//         });
//       }
//     } catch (error) {
//       console.log(`Error on Contact`, error);
//     }
//   }

//   async onName(ctx: Context) {
//     const user = ctx.from;

//     if (!ctx.message || !user) {
//       return ctx.reply(
//         "Noto‚Äòg‚Äòri xabar formati yoki foydalanuvchi aniqlanmadi."
//       );
//     }

//     if (!("text" in ctx.message)) {
//       return ctx.reply(
//         "‚ùå Iltimos, faqat matn yuboring. Sticker, rasm yoki gif emas."
//       );
//     }

//     const message = ctx.message.text.trim();
//     const user_id = user.id;

//     if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(message)) {
//       return ctx.reply(
//         "‚ùå Iltimos, haqiqiy ismingizni yuboring. Emoji, raqam yoki belgilar emas."
//       );
//     }

//     const existingUser = await this.botModel.findOne({ user_id });

//     if (existingUser) {
//       if (!existingUser.name) {
//         existingUser.set({ name: message });
//         await existingUser.save();
//         await ctx.reply(`‚úÖ ${message} ismingiz saqlandi.`);

//         // Lokatsiya tugmasini yuborish
//         return ctx.reply("üìç Endi joylashuvingizni yuboring:", {
//           reply_markup: {
//             keyboard: [
//               [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//             ],
//             resize_keyboard: true,
//             one_time_keyboard: true,
//           },
//         });
//       } else {
//         return ctx.reply(
//           `Siz allaqachon ro'yxatdan o'tgansiz. Ismingiz: ${existingUser.name}`
//         );
//       }
//     } else {
//       await this.botModel.create({
//         user_id: user.id,
//         user_name: user.username ?? "",
//         name: message,
//         first_name: user.first_name ?? "",
//         last_name: user.last_name ?? "",
//         lang: user.language_code ?? "",
//       });

//       await ctx.reply(`‚úÖ Ismingiz qabul qilindi: ${message}`);

//       // Lokatsiya tugmasini yuborish
//       return ctx.reply("üìç Endi joylashuvingizni yuboring:", {
//         reply_markup: {
//           keyboard: [
//             [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//           ],
//           resize_keyboard: true,
//           one_time_keyboard: true,
//         },
//       });
//     }
//   }

//   async onLocation(ctx: Context) {
//     try {
//       console.log("üìç Location handler started");

//       if (!ctx.message || !("location" in ctx.message)) {
//         console.log("üö´ No location in message:", ctx.message);
//         return ctx.reply(
//           "‚ùóÔ∏è Iltimos, pastdagi tugma orqali lokatsiyangizni yuboring."
//         );
//       }

//       const user_id = ctx.from?.id;
//       if (!user_id) {
//         console.log("üö´ User ID not found in ctx");
//         return ctx.reply("Foydalanuvchi aniqlanmadi.");
//       }

//       const user = await this.botModel.findOne({ user_id });
//       if (!user) {
//         console.log("üö´ User not found in DB:", user_id);
//         return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
//       }

//       const latitude = ctx.message.location.latitude;
//       const longitude = ctx.message.location.longitude;
//       const location = `${latitude},${longitude}`;
//       console.log("‚úÖ Received location:", location);

//       user.location = location;
//       await user.save();

//       console.log("‚úÖ Location saved to user model:", user);

//       await ctx.reply("‚úÖ Joylashuvingiz muvaffaqiyatli saqlandi!");
//     } catch (error) {
//       console.error("‚ùå onLocation error:", error);
//       await ctx.reply("‚ùå Xatolik yuz berdi. Iltimos, qayta urinib ko'ring.");
//     }
//   }
// }

///////////////////////////////////////////////////////////////////

import { Injectable } from "@nestjs/common";
import { Context, Markup } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  // /start komandasi
  async start(ctx: Context) {
    await ctx.reply("Assalomu alaykum! Telefon raqamingizni yuboring:", {
      reply_markup: {
        keyboard: [
          [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  // Telefon raqamini qabul qilish
  async onContact(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) {
      return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
    }

    if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
      const contact = ctx.message.contact;
      let user = await this.botModel.findOne({ user_id });

      if (user) {
        user.phone_number = contact.phone_number;
        await user.save();
      } else {
        await this.botModel.create({
          user_id,
          phone_number: contact.phone_number,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });
      }

      await ctx.reply("‚úÖ Endi ismingizni yuboring:", {
        reply_markup: { remove_keyboard: true },
      });
    } else {
      await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
    }
  }

  // Ismni qabul qilish
  async onName(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) return;

    if ("text" in ctx.message && typeof ctx.message.text === "string") {
      const text = ctx.message.text.trim();

      if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
        return ctx.reply(
          "‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing."
        );
      }

      const existingUser = await this.botModel.findOne({ user_id });

      if (existingUser) {
        if (!existingUser.name) {
          existingUser.name = text;
          await existingUser.save();
          await ctx.reply(`‚úÖ Ismingiz saqlandi: ${text}`);
        }
      } else {
        await this.botModel.create({
          user_id,
          name: text,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });

        await ctx.reply(`‚úÖ Ismingiz saqlandi: ${text}`);
      }

      // Lokatsiya so‚Äòrash
      await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else {
      await ctx.reply("‚ùå Iltimos, faqat matn yuboring.");
    }
  }

  // Joylashuvni qabul qilish
  async onLocation(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) {
      return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
    }

    // Faqat location kelgandagina saqlaymiz
    if ("location" in ctx.message && ctx.message.location) {
      const { latitude, longitude } = ctx.message.location;
      const user = await this.botModel.findOne({ user_id });

      if (!user) {
        return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
      }

      const location = `${latitude},${longitude}`;
      user.location = location;
      await user.save();

      await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");
      return this.kasallikniSozlash(ctx);
    }

    // ‚ö†Ô∏è Aks holda noto‚Äòg‚Äòri xabar yuborilgan bo‚Äòladi (matn, sticker, rasm...)
    // return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
    //   reply_markup: {
    //     keyboard: [
    //       [{ text: "üìç Joylashuvni yuborish", request_location: true }],
    //     ],
    //     resize_keyboard: true,
    //     one_time_keyboard: true,
    //   },
    // });
    return ctx.reply("Yo lokatsiya ");
  }

  // Kasallik haqida tugmalar
  async kasallikniSozlash(ctx: Context) {
    await ctx.reply("ü©∫ Sizda hozirda biron kasallik bormi?", {
      reply_markup: {
        keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  // Matnli javoblar uchun umumiy handler
  async handleText(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!ctx.message || !("text" in ctx.message)) return;
    const text = ctx.message.text.trim();
    if (!user_id || !text) return;

    const user = await this.botModel.findOne({ user_id });

    // Ism hali yo‚Äòq bo‚Äòlsa, ismni saqlash
    if (user && !user.name) {
      return this.onName(ctx);
    }

    // ‚ùå Yo‚Äòq -> sog'lom deb saqlash
    if (text === "‚ùå Yo‚Äòq") {
      if (user) {
        user.illness = "sog'lom";
        await user.save();
      }
      await ctx.reply("‚úÖ Siz sog'lom deb belgilandingiz.", {
        reply_markup: Markup.removeKeyboard().reply_markup,
      });
      return this.nextStep(ctx);
    }

    // ‚úÖ Ha -> kasallik so‚Äòrash
    if (text === "‚úÖ Ha") {
      this.kasallikMap.set(user_id, true); // ‚û§ Bu foydalanuvchidan kasallik haqida matn kutamiz degani
      return ctx.reply(
        "üìù Qanday kasallik borligini yozing (masalan: gripp, allergiya)",
        { reply_markup: Markup.removeKeyboard().reply_markup } // ‚û§ Keyboard'ni tozalab yuborish
      );
    }

    // Foydalanuvchi kasallik nomini yozgan bo‚Äòlsa
    if (this.kasallikMap.has(user_id)) {
      if (user) {
        user.illness = text; // qanday yozgan bo‚Äòlsa, shunday saqlaymiz
        await user.save();
        this.kasallikMap.delete(user_id);
        await ctx.reply(`‚úÖ Kasalligingiz saqlandi: ${text}`);
        return this.nextStep(ctx);
      }
    }
    return ctx.reply("‚ùì Noma'lum buyruq. Iltimos, tugmani bosing !");
  }

  // Keyingi bosqich (kelajakda xizmat turi, manzil, va h.k.)
  async nextStep(ctx: Context) {
    await ctx.reply(
      "üöÄ Ro‚Äòyxatdan o‚Äòtish tugadi! Yaqinda xizmatni boshlaysiz."
    );
  }
}

































import { Injectable } from "@nestjs/common";
import { Context, Markup } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";
import { log } from "console";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  // /start komandasi
  async start(ctx: Context) {
    await ctx.reply("Assalomu alaykum! Telefon raqamingizni yuboring:", {
      reply_markup: {
        keyboard: [
          [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  // Telefon raqamini qabul qilish
  async onContact(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) {
      return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
    }

    if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
      const contact = ctx.message.contact;
      let user = await this.botModel.findOne({ user_id });

      if (user) {
        user.phone_number = contact.phone_number;
        await user.save();
      } else {
        await this.botModel.create({
          user_id,
          phone_number: contact.phone_number,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });
      }

      await ctx.reply("‚úÖ Endi ismingizni yuboring:", {
        reply_markup: { remove_keyboard: true },
      });
    } else {
      await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
    }
  }

  // Ismni qabul qilish
  async onName(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) return;

    if ("text" in ctx.message && typeof ctx.message.text === "string") {
      const text = ctx.message.text.trim();

      if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
        return ctx.reply(
          "‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing."
        );
      }

      const existingUser = await this.botModel.findOne({ user_id });

      if (existingUser) {
        if (!existingUser.name) {
          existingUser.name = text;
          await existingUser.save();
          await ctx.reply(`‚úÖ Ismingiz saqlandi: ${text}`);
        }
      } else {
        await this.botModel.create({
          user_id,
          name: text,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });

        await ctx.reply(`‚úÖ Ismingiz saqlandi: ${text}`);
      }

      // Lokatsiya so‚Äòrash

    } else {
      await ctx.reply("‚ùå Iltimos, faqat matn yuboring.");
    }
  }

  // Joylashuvni qabul qilish
  // async onLocation(ctx: Context) {
  //   const user_id = ctx.from?.id;
  //   if (!user_id || !ctx.message) {
  //     return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
  //   }

  //   // Faqat location kelgandagina saqlaymiz
  //   if ("location" in ctx.message && ctx.message.location) {
  //     const { latitude, longitude } = ctx.message.location;
  //     const user = await this.botModel.findOne({ user_id });

  //     if (!user) {
  //       return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
  //     }

  //     const location = `${latitude},${longitude}`;
  //     user.location = location;
  //     await user.save();

  //     await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");
  //     return this.kasallikniSozlash(ctx);
  //   }

  //   // ‚ö†Ô∏è Aks holda noto‚Äòg‚Äòri xabar yuborilgan bo‚Äòladi (matn, sticker, rasm...)
  //   return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
  //     reply_markup: {
  //       keyboard: [
  //         [{ text: "üìç Joylashuvni yuborish", request_location: true }],
  //       ],
  //       resize_keyboard: true,
  //       one_time_keyboard: true,
  //     },
  //   });

  //   // return ctx.reply("Yo lokatsiya ");
  // }

async handleText(ctx: Context) {
  try {
    const user_id = ctx.from?.id;
    if (!ctx.message || !("text" in ctx.message)) return;
    const text = ctx.message.text.trim();
    if (!user_id || !text) return;

    const user = await this.botModel.findOne({ user_id });

    // Ism hali yo‚Äòq bo‚Äòlsa, ismni saqlash
    if (user && !user.name) {
      return this.onName(ctx);
    }

    // ‚ùå Yo‚Äòq -> sog'lom deb saqlash
    if (text === "‚ùå Yo‚Äòq") {
      if (user) {
        user.illness = "sog'lom";
        await user.save();
      }
      await ctx.reply("‚úÖ Siz sog'lom deb belgilandingiz.", Markup.removeKeyboard());
      return;
    }

    // ‚úÖ Ha -> kasallik so‚Äòrash
    if (text === "‚úÖ Ha") {
      this.kasallikMap.set(user_id, true); // ‚û§ Bu foydalanuvchidan kasallik haqida matn kutamiz degani
      await ctx.reply(
        "üìù Qanday kasallik borligini yozing (masalan: gripp, allergiya)",
        Markup.removeKeyboard()
      );
      return;
    }

    // Foydalanuvchi kasallik nomini yozgan bo‚Äòlsa
    if (this.kasallikMap.has(user_id)) {
      if (user) {
        user.illness = text; // qanday yozgan bo‚Äòlsa, shunday saqlaymiz
        await user.save();
        this.kasallikMap.delete(user_id);
        await ctx.reply(`‚úÖ Kasalligingiz saqlandi: ${text}`);
        return;
      }
    }

    // Agar yuqoridagi shartlar bajarmasa, noma'lum buyruq
    return await ctx.reply("‚ùì Noma'lum buyruq. Iltimos, tugmani bosing !");

          await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
  } catch (error) {
    console.error("Xatolik handleText funksiyasida:", error);
    await ctx.reply("‚ùóÔ∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring.");
  }
}


async onLocation(ctx: Context) {
  try {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) {
      return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
    }
    console.log("qwertyui");
    

    // Faqat location kelgandagina saqlaymiz
    if ("location" in ctx.message && ctx.message.location) {
      const { latitude, longitude } = ctx.message.location;
      const user = await this.botModel.findOne({ user_id });

      if (!user) {
        return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
      }

      const location = `${latitude},${longitude}`;
      user.location = location;
      await user.save();

      await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");
      return this.kasallikniSozlash(ctx);
    }

    // ‚ö†Ô∏è Aks holda noto‚Äòg‚Äòri xabar yuborilgan bo‚Äòladi (matn, sticker, rasm...)
    return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
      reply_markup: {
        keyboard: [
          [{ text: "üìç Joylashuvni yuborish", request_location: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  } catch (error) {
    console.error("onLocation error:", error);
    return ctx.reply("‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring.");
  }
}


  // Kasallik haqida tugmalar
  async kasallikniSozlash(ctx: Context) {
    await ctx.reply("ü©∫ Sizda hozirda biron kasallik bormi?", {
      reply_markup: {
        keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }



  // Keyingi bosqich (kelajakda xizmat turi, manzil, va h.k.)
  // async nextStep(ctx: Context) {
  //   await ctx.reply(
  //     "üöÄ Ro‚Äòyxatdan o‚Äòtish tugadi! Yaqinda xizmatni boshlaysiz."
  //   );
  // }
}



// import { Injectable } from "@nestjs/common";
// import { Context, Markup } from "telegraf";
// import { InjectModel } from "@nestjs/mongoose";
// import { Model } from "mongoose";
// import { Bot, BotDocument } from "./schema/bot.schema";

// @Injectable()
// export class BotService {
//   private kasallikMap = new Map<number, boolean>();

//   constructor(
//     @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
//   ) { }

//   // /start komandasi
//   async start(ctx: Context) {
//     await ctx.reply("Assalomu alaykum! Iltimos telefon raqamingizni yuboring", {
//       reply_markup: {
//         keyboard: [
//           [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
//         ],
//         resize_keyboard: true,
//         one_time_keyboard: true,
//       },
//     });
//   }

//   // Telefon raqamini qabul qilish
//   async onContact(ctx: Context) {
//     const user_id = ctx.from?.id;
//     if (!user_id || !ctx.message) {
//       return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
//     }

//     if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
//       const contact = ctx.message.contact;
//       let user = await this.botModel.findOne({ user_id });

//       if (user) {
//         user.phone_number = contact.phone_number;
//         await user.save();
//       } else {
//         await this.botModel.create({
//           user_id,
//           phone_number: contact.phone_number,
//           user_name: ctx.from?.username ?? "",
//           first_name: ctx.from?.first_name ?? "",
//           last_name: ctx.from?.last_name ?? "",
//           lang: ctx.from?.language_code ?? "",
//         });
//       }

//       await ctx.reply("‚úÖ Endi ismingizni yuboring", {
//         reply_markup: { remove_keyboard: true },
//       });
//     } else {
//       await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
//     }
//   }

//   // Ismni qabul qilish
//   async onName(ctx: Context) {
//     const user_id = ctx.from?.id;
//     if (!user_id || !ctx.message) return;

//     if ("text" in ctx.message && typeof ctx.message.text === "string") {
//       const text = ctx.message.text.trim();

//       if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
//         return ctx.reply(
//           "‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing."
//         );
//       }

//       if (
//         /[\p{Emoji}]/u.test(text)) {
//         await ctx.reply("‚ùóÔ∏è Iltimos, emoji yubormang. Faqat matn kiriting.");
//         return
//       }

//       const existingUser = await this.botModel.findOne({ user_id });

//       if (existingUser) {
//         if (!existingUser.name) {
//           existingUser.name = text;
//           await existingUser.save();
//           await ctx.reply(`${text} Ismingiz saqlandi`);
//         }
//       } else {
//         await this.botModel.create({
//           user_id,
//           name: text,
//           user_name: ctx.from?.username ?? "",
//           first_name: ctx.from?.first_name ?? "",
//           last_name: ctx.from?.last_name ?? "",
//           lang: ctx.from?.language_code ?? "",
//         });

//         await ctx.reply(`${text} Ismingiz saqlandi`);
//       }

//       await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
//         reply_markup: {
//           keyboard: [[{ text: "üìç Joylashuvni yuborish", request_location: true }]],
//           resize_keyboard: true,
//           one_time_keyboard: true,
//         },
//       });
//     } else {
//       await ctx.reply("‚ùå Iltimos, faqat matn yuboring.");
//     }
//   }

//   // Textni umumiy ishlovchi
//   async handleText(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!ctx.message || !("text" in ctx.message)) return;
//       const text = ctx.message.text.trim();
//       if (!user_id || !text) return;

//       const user = await this.botModel.findOne({ user_id });

//       // üîÅ Agar foydalanuvchi yo'q bo‚Äòlsa yoki telefon raqam yo‚Äòq bo‚Äòlsa ‚Üí /start
//       if (!user || !user.phone_number) {
//         return this.start(ctx);
//       }

//       // üîÅ Agar ism va illness mavjud bo‚Äòlsa ‚Üí onLocation bosqichiga o‚Äòtkazamiz
//       if (user.name && user.illness) {
//         return this.onLocation(ctx);
//       }

//       // ‚¨áÔ∏è Ism hali yo‚Äòq bo‚Äòlsa ‚Üí ismni qabul qilish
//       if (!user.name) {
//         return this.onName(ctx);
//       }

//       // ‚úÖ Ha ‚Üí kasallik yozishni so‚Äòrash
//       if (text === "‚úÖ Ha") {
//         this.kasallikMap.set(user_id, true);
//         await ctx.reply(
//           "üìù Farzandingizda qanday kasallik borligini yozing (masalan: gripp, allergiya)",
//           Markup.removeKeyboard()
//         );
//         return;
//       }

//       // ‚ùå Yo‚Äòq ‚Üí sog'lom deb saqlash
//       if (text === "‚ùå Yo‚Äòq") {
//         user.illness = "sog'lom";
//         await user.save();
//         await ctx.reply("‚úÖ Farzadingizni sog'lom deb belgilandingiz.", Markup.removeKeyboard());
//         return;
//       }

//       // ‚úçÔ∏è Kasallik matni kiritilsa
//       if (this.kasallikMap.has(user_id)) {
//         user.illness = text;
//         await user.save();
//         this.kasallikMap.delete(user_id);
//         await ctx.reply(`‚úÖ Farzadingizni kasalligi saqlandi: ${text}`);
//         return;
//       }

//       // ‚õîÔ∏è Noma'lum buyruq ‚Üí location so‚Äòrash
//       console.log("Reply argument:-------------------------------------------------------------------");
//       await ctx.reply("‚ùì Noma'lum buyruq. Iltimos, tugmani bosing ‚¨áÔ∏è");

//       await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
//         reply_markup: {
//           keyboard: [
//             [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//           ],
//           resize_keyboard: true,
//           one_time_keyboard: true,
//         },
//       });
//     } catch (error) {
//       console.error("Xatolik handleText funksiyasida:", error);
//       await ctx.reply("‚ùóÔ∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring.");
//       return this.start(ctx);
//     }
//   }

//   // Kasallik haqida tugmalar
//   async kasallikniSozlash(ctx: Context) {
//     await ctx.reply("ü©∫ Sizning farzadingizda hozirda biron kasallik bormi?", {
//       reply_markup: {
//         keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
//         resize_keyboard: true,
//         one_time_keyboard: true,
//       },
//     });
//   }

//   // Joylashuvni qabul qilish (oxirga ko‚Äòchirildi)
//   // async onLocation(ctx: Context) {
//   //   try {
//   //     const user_id = ctx.from?.id;
//   //     if (!user_id || !ctx.message) {
//   //       return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
//   //     }
//   //     console.log("qwertyui");

//   //     // Faqat location kelgandagina saqlaymiz
//   //     if ("location" in ctx.message && ctx.message.location) {
//   //       const { latitude, longitude } = ctx.message.location;
//   //       const user = await this.botModel.findOne({ user_id });

//   //       if (!user) {
//   //         return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
//   //       }

//   //       const location = `${latitude},${longitude}`;
//   //       user.location = location;
//   //       await user.save();

//   //       await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");
//   //       return this.kasallikniSozlash(ctx);
//   //     }

//   //     // ‚ö†Ô∏è Aks holda noto‚Äòg‚Äòri xabar yuborilgan bo‚Äòladi
//   //     return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
//   //       reply_markup: {
//   //         keyboard: [
//   //           [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//   //         ],
//   //         resize_keyboard: true,
//   //         one_time_keyboard: true,
//   //       },
//   //     });
//   //   } catch (error) {
//   //     console.error("onLocation error:", error);
//   //     return ctx.reply("‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring.");
//   //   }
//   // }

//   async onLocation(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!user_id || !ctx.message) {
//         return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
//       }
//       console.log("qwertyui");

//       // Faqat location kelgandagina saqlaymiz
//       if ("location" in ctx.message && ctx.message.location) {
//         const { latitude, longitude } = ctx.message.location;
//         const user = await this.botModel.findOne({ user_id });

//         if (!user) {
//           return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
//         }

//         const location = `${latitude},${longitude}`;
//         user.location = location;
//         await user.save();

//         await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");

//         // ‚úÖ Agar illness yo‚Äòq bo‚Äòlsa ‚Äî Ha / Yo‚Äòq tugmalarini yuborish
//         if (!user.illness) {
//           return ctx.reply("ü©∫ Sizning farzandingizda hozirda biron kasallik bormi?", {
//             reply_markup: {
//               keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
//               resize_keyboard: true,
//               one_time_keyboard: true,
//             },
//           });
//         }

//         // ‚úÖ Aks holda kasallikniSozlash() chaqiriladi
//         return this.kasallikniSozlash(ctx);
//       }


//       // ‚ö†Ô∏è Aks holda noto‚Äòg‚Äòri xabar yuborilgan bo‚Äòladi
//       if (!location) {
//         return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
//           reply_markup: {
//             keyboard: [
//               [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//             ],
//             resize_keyboard: true,
//             one_time_keyboard: true,
//           },
//         });
//       } else {
//         this.kasallikniSozlash(ctx)
//       }
//     } catch (error) {
//       console.error("onLocation error:", error);
//       return ctx.reply("‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring.");
//     }
//   }
// }




  // async handleText(ctx: Context) {
  //   try {
  //     const user_id = ctx.from?.id;
  //     if (!ctx.message || !("text" in ctx.message)) return;
  //     const text = ctx.message.text.trim();
  //     if (!user_id || !text) return;

  //     const user = await this.botModel.findOne({ user_id });

  //     if (!user || !user.phone_number) {
  //       return this.start(ctx);
  //     }

  //     if (user.name && user.illness) {
  //       return this.onLocation(ctx);
  //     }

  //     if (!user.name) {
  //       return this.onName(ctx);
  //     }

  //     if (text === "‚úÖ Ha") {
  //       this.kasallikMap.set(user_id, true);
  //       await ctx.reply(
  //         "üìù Farzandingizda qanday kasallik borligini yozing (masalan: gripp, allergiya)",
  //         Markup.removeKeyboard()
  //       );
  //       return;
  //     }

  //     if (text === "‚ùå Yo‚Äòq") {
  //       user.illness = "sog'lom";
  //       await user.save();
  //       await ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.", Markup.removeKeyboard());
  //       return;
  //     }

  //     if (this.kasallikMap.has(user_id)) {
  //       user.illness = text;
  //       await user.save();
  //       this.kasallikMap.delete(user_id);
  //       await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
  //       return;
  //     }

  //     await ctx.reply("‚ùì Noma'lum buyruq. Iltimos, tugmani bosing ‚¨áÔ∏è");

  //     await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
  //       reply_markup: {
  //         keyboard: [
  //           [{ text: "üìç Joylashuvni yuborish", request_location: true }],
  //         ],
  //         resize_keyboard: true,
  //         one_time_keyboard: true,
  //       },
  //     });
  //   } catch (error) {
  //     console.error("Xatolik handleText funksiyasida:", error);
  //     await ctx.reply("‚ùóÔ∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring.");
  //     return this.start(ctx);
  //   }
  // }

  // async kasallikniSozlash(ctx: Context) {
  //   await ctx.reply("ü©∫ Sizning farzandingizda hozirda biron kasallik bormi?", {
  //     reply_markup: {
  //       keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
  //       resize_keyboard: true,
  //       one_time_keyboard: true,
  //     },
  //   });
  //   if (!this.kasallikniSozlash)
  //     return this.kasallikniSozlash
  // }




  // async onLocation(ctx: Context) {
  //   try {
  //     const user_id = ctx.from?.id;
  //     if (!user_id || !ctx.message) {
  //       return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
  //     }

  //     if ("location" in ctx.message && ctx.message.location) {
  //       const { latitude, longitude } = ctx.message.location;
  //       const user = await this.botModel.findOne({ user_id });

  //       if (!user) {
  //         return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
  //       }

  //       const location = `${latitude},${longitude}`;
  //       user.location = location;
  //       await user.save();

  //       await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");

  //       // if (!user.illness) {
  //       //   return ctx.reply("ü©∫ Sizning farzandingizda hozirda biron kasallik bormi?", {
  //       //     reply_markup: {
  //       //       keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
  //       //       resize_keyboard: true,
  //       //       one_time_keyboard: true,
  //       //     },
  //       //   });
  //       // }

  //       // return this.kasallikniSozlash(ctx);
  //     }

  //     return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
  //       reply_markup: {
  //         keyboard: [
  //           [{ text: "üìç Joylashuvni yuborish", request_location: true }],
  //         ],
  //         resize_keyboard: true,
  //         one_time_keyboard: true,
  //       },
  //     });
  //   } catch (error) {
  //     console.error("onLocation error:", error);
  //     return ctx.reply("‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring.");
  //   }
  // }


  //   async onLocation(ctx: Context) {
  //   try {
  //     const user_id = ctx.from?.id;
  //     if (!user_id || !ctx.message) {
  //       return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
  //     }

  //     const user = await this.botModel.findOne({ user_id });
  //     if (!user) {
  //       return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
  //     }

  //     if ("location" in ctx.message && ctx.message.location) {
  //       const { latitude, longitude } = ctx.message.location;

  //       const location = `${latitude},${longitude}`;
  //       user.location = location;
  //       await user.save();

  //       await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");
  //       return this.kasallikniSozlash(ctx);
  //     }

  //     return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
  //       reply_markup: {
  //         keyboard: [
  //           [{ text: "üìç Joylashuvni yuborish", request_location: true }],
  //         ],
  //         resize_keyboard: true,
  //         one_time_keyboard: true,
  //       },
  //     });
  //   } catch (error) {
  //     console.error("onLocation error:", error);
  //     return ctx.reply("‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring.");
  //   }
  // }





//------------------


import { Injectable } from "@nestjs/common";
import { Context, Markup } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  async start(ctx: Context) {
    await ctx.reply("Assalomu alaykum! Iltimos telefon raqamingizni yuboring", {
      reply_markup: {
        keyboard: [
          [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  async onContact(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) {
      return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
    }

    if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
      const contact = ctx.message.contact;
      let user = await this.botModel.findOne({ user_id });

      if (user) {
        user.phone_number = contact.phone_number;
        await user.save();
      } else {
        await this.botModel.create({
          user_id,
          phone_number: contact.phone_number,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });
      }

      await ctx.reply("‚úÖ Endi ismingizni yuboring", {
        reply_markup: { remove_keyboard: true },
      });
    } else {
      await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
    }
  }

  async onName(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) return;

    if ("text" in ctx.message && typeof ctx.message.text === "string") {
      const text = ctx.message.text.trim();

      if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
        return ctx.reply(
          "‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing."
        );
      }

      if (/[\p{Emoji}]/u.test(text)) {
        return ctx.reply("‚ùóÔ∏è Iltimos, emoji yubormang. Faqat matn kiriting.");
      }

      const existingUser = await this.botModel.findOne({ user_id });

      if (existingUser) {
        if (!existingUser.name) {
          existingUser.name = text;
          await existingUser.save();
          await ctx.reply(`${text} ismingiz saqlandi.`);
        }
      } else {
        await this.botModel.create({
          user_id,
          name: text,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });

        await ctx.reply(`${text} ismingiz saqlandi.`);
      }

      await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else {
      await ctx.reply("‚ùå Iltimos, faqat matn yuboring.");
    }
  }

  async handleText(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!ctx.message || !("text" in ctx.message)) return;
      const text = ctx.message.text.trim();
      if (!user_id || !text) return;

      const user = await this.botModel.findOne({ user_id });

      if (!user || !user.phone_number) {
        return this.start(ctx);
      }

      // 1. Ism hali kiritilmagan bo‚Äòlsa
      if (!user.name) {
        return this.onName(ctx);
      }

      // 2. ‚ùå Yo‚Äòq ‚Äî sog'lom deb belgilash
      if (text === "‚ùå Yo‚Äòq") {
        user.illness = "sog'lom";
        await user.save();
        await ctx.reply(
          "‚úÖ Farzandingiz sog'lom deb belgilandi.",
          Markup.removeKeyboard()
        );

        // Joylashuvga o'tish
        return ctx.reply("üìç Endi joylashuvingizni yuboring:", {
          reply_markup: {
            keyboard: [
              [{ text: "üìç Joylashuvni yuborish", request_location: true }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }

      // 3. ‚úÖ Ha ‚Äî kasallik yozilishini boshlash
      if (text === "‚úÖ Ha") {
        this.kasallikMap.set(user_id, true);
        return ctx.reply(
          "üìù Farzandingizda qanday kasallik borligini yozing (masalan: gripp, allergiya)",
          Markup.removeKeyboard()
        );
      }

      // 4. Kasallik nomi faqat ‚úÖ Ha dan keyin matn kiritilganda qabul qilinadi
      if (this.kasallikMap.has(user_id)) {
        user.illness = text;
        await user.save();
        this.kasallikMap.delete(user_id);

        await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);

        return ctx.reply("üìç Endi joylashuvingizni yuboring:", {
          reply_markup: {
            keyboard: [
              [{ text: "üìç Joylashuvni yuborish", request_location: true }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }

      // 5. Agar illness yo‚Äòq va foydalanuvchi tugma bosmasdan matn yozgan bo‚Äòlsa
      if (!user.illness) {
        return ctx.reply("‚ùóÔ∏è Iltimos, quyidagi tugmalardan birini tanlang:", {
          reply_markup: {
            keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }

      // 6. Noma'lum boshqa holatlar
      await ctx.reply(
        "‚ùì Noma'lum buyruq. Iltimos, faqat tugmalardan foydalaning."
      );
    } catch (error) {
      console.error("Xatolik handleText funksiyasida:", error);
      await ctx.reply(
        "‚ùóÔ∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring."
      );
      return this.start(ctx);
    }
  }
  async askIllnessQuestion(ctx: Context) {
    return ctx.reply(
      "ü©∫ Sizning farzandingizda hozirda biron kasallik bormi?",
      {
        reply_markup: {
          keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  }

  // async onLocation(ctx: Context) {
  //   try {
  //     const user_id = ctx.from?.id;
  //     if (!user_id || !ctx.message) {
  //       return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
  //     }

  //     const user = await this.botModel.findOne({ user_id });
  //     if (!user) {
  //       return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
  //     }

  //     if ("location" in ctx.message && ctx.message.location) {
  //       const { latitude, longitude } = ctx.message.location;

  //       const location = `${latitude},${longitude}`;
  //       user.location = location;
  //       await user.save();

  //       await ctx.reply("‚úÖ Joylashuvingiz saqlandi.");

  //       // illness yo‚Äòqligini tekshir
  //       // if (!user.illness) {
  //       //   return this.kasallikMap(ctx);
  //       // }

  //       // Bu yerga boshqa davom ettiruvchi logika qo‚Äòshishingiz mumkin
  //       return ctx.reply("üöÄ Endi navbatdagi bosqichga o'ting."); // yoki boshqa handler
  //     }

  //     return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
  //       reply_markup: {
  //         keyboard: [
  //           [{ text: "üìç Joylashuvni yuborish", request_location: true }],
  //         ],
  //         resize_keyboard: true,
  //         one_time_keyboard: true,
  //       },
  //     });
  //   } catch (error) {
  //     console.error("onLocation error:", error);
  //     return ctx.reply(
  //       "‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring."
  //     );
  //   }
  // }

  // async askIllnessQuestion(ctx: Context) {
  //   return ctx.reply("ü©∫ Sizning farzandingizda hozirda biron kasallik bormi?", {
  //     reply_markup: {
  //       keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
  //       resize_keyboard: true,
  //       one_time_keyboard: true,
  //     },
  //   });
  // }

  async onLocation(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) {
        return ctx.reply("‚ùóÔ∏è Foydalanuvchi yoki xabar aniqlanmadi.");
      }

      const user = await this.botModel.findOne({ user_id });
      if (!user) {
        return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");
      }

      if ("location" in ctx.message && ctx.message.location) {
        const { latitude, longitude } = ctx.message.location;
        const location = `${latitude},${longitude}`;
        user.location = location;
        await user.save();

        await ctx.reply("‚úÖ Joylashuvingiz saqlandi.", Markup.removeKeyboard());

        // ‚ùóÔ∏è Joylashuv yuborilgach kasallik haqida so‚Äòrash
        return this.askIllnessQuestion(ctx);
      }

      return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("onLocation error:", error);
      return ctx.reply(
        "‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring."
      );
    }
  }
}


//----------------------


clean Code

import { Injectable } from "@nestjs/common";
import { Context, Markup } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  async start(ctx: Context) {
    await ctx.reply("Assalomu alaykum! Iltimos telefon raqamingizni yuboring", {
      reply_markup: {
        keyboard: [
          [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  async onContact(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) return;

    if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
      const contact = ctx.message.contact;
      let user = await this.botModel.findOne({ user_id });

      if (user) {
        user.phone_number = contact.phone_number;
        await user.save();
      } else {
        await this.botModel.create({
          user_id,
          phone_number: contact.phone_number,
          user_name: ctx.from?.username ?? "",
          first_name: ctx.from?.first_name ?? "",
          last_name: ctx.from?.last_name ?? "",
          lang: ctx.from?.language_code ?? "",
        });
      }

      await ctx.reply("‚úÖ Endi ismingizni yuboring", {
        reply_markup: { remove_keyboard: true },
      });
    } else {
      await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
    }
  }

  async onName(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message || !("text" in ctx.message)) return;
    const text = ctx.message.text.trim();

    if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
      return ctx.reply(
        "‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing."
      );
    }

    const user = await this.botModel.findOne({ user_id });
    if (!user) return;

    user.name = text;
    await user.save();

    await ctx.reply(`‚úÖ ${text} ismingiz saqlandi.`);
    await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
      reply_markup: {
        keyboard: [
          [{ text: "üìç Joylashuvni yuborish", request_location: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  async onLocation(ctx: Context) {
    const user_id = ctx.from?.id;
    if (!user_id || !ctx.message) return;

    const user = await this.botModel.findOne({ user_id });
    if (!user) return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");

    if ("location" in ctx.message && ctx.message.location) {
      const { latitude, longitude } = ctx.message.location;
      user.location = `${latitude},${longitude}`;
      await user.save();

      await ctx.reply("‚úÖ Joylashuvingiz saqlandi.", Markup.removeKeyboard());
      return this.askIllnessQuestion(ctx);
    }

    return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
      reply_markup: {
        keyboard: [
          [{ text: "üìç Joylashuvni yuborish", request_location: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  async askIllnessQuestion(ctx: Context) {
    return ctx.reply("ü©∫ Farzandingizda hozirda biron kasallik bormi?", {
      reply_markup: {
        keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  // async handleText(ctx: Context) {
  //   try {
  //     const user_id = ctx.from?.id;
  //     if (!ctx.message || !("text" in ctx.message)) return;
  //     const text = ctx.message.text.trim();
  //     if (!user_id || !text) return;

  //     const user = await this.botModel.findOne({ user_id });
  //     if (!user || !user.phone_number) return this.start(ctx);

  //     if (!user.name) return this.onName(ctx);

  //     if (!user.location) {
  //       return ctx.reply("‚ùóÔ∏è Iltimos, avval joylashuvingizni yuboring!", {
  //         reply_markup: {
  //           keyboard: [
  //             [{ text: "üìç Joylashuvni yuborish", request_location: true }],
  //           ],
  //           resize_keyboard: true,
  //           one_time_keyboard: true,
  //         },
  //       });
  //     }

  //     if (text === "‚úÖ Ha") {
  //       this.kasallikMap.set(user_id, true);
  //       return ctx.reply(
  //         "üìù Farzandingizda qanday kasallik borligini yozing:",
  //         Markup.removeKeyboard()
  //       );
  //     }

  //     if (text === "‚ùå Yo‚Äòq") {
  //       user.illness = "sog'lom";
  //       await user.save();

  //       await ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.", {
  //         reply_markup: { remove_keyboard: true },
  //       });

  //       return ctx.reply("üìç Endi joylashuvingizni yuboring:", {
  //         reply_markup: {
  //           keyboard: [
  //             [{ text: "üìç Joylashuvni yuborish", request_location: true }],
  //           ],
  //           resize_keyboard: true,
  //           one_time_keyboard: true,
  //         },
  //       });
  //     }

  //     if (this.kasallikMap.has(user_id)) {
  //       user.illness = text;
  //       await user.save();
  //       this.kasallikMap.delete(user_id);
  //       await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
  //     }

  //     // Check for completeness
  //     if (!user.phone_number || !user.name || !user.location || !user.illness) {
  //       return ctx.reply("‚ö†Ô∏è Iltimos, barcha bosqichlarni to‚Äòldiring.");
  //     }

  //     return ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
  //   } catch (error) {
  //     console.error("handleText xatolik:", error);
  //     return ctx.reply(
  //       "‚ö†Ô∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring."
  //     );
  //   }
  // }

  async handleText(ctx: Context) {
  try {
    const user_id = ctx.from?.id;
    if (!ctx.message || !("text" in ctx.message)) return;

    const text = ctx.message.text.trim();
    console.log("üì© Kiritilgan matn:", text);

    if (!user_id || !text) return;

    const user = await this.botModel.findOne({ user_id });
    console.log("üîé Foydalanuvchi:", user);

    if (!user) {
      console.log("‚ö†Ô∏è User topilmadi. start() chaqirildi.");
      return this.start(ctx);
    }

    if (!user.phone_number) {
      console.log("üìû Telefon raqam yo‚Äòq. start() chaqirildi.");
      return this.start(ctx);
    }

    if (!user.name) {
      console.log("üßë‚Äçüíº Ism yo‚Äòq. onName() chaqirildi.");
      return this.onName(ctx);
    }

    if (!user.location) {
      console.log("üìç Joylashuv yo‚Äòq. onLocation() chaqirildi.");
      return this.onLocation(ctx);
    }

    if (!user.illness && !["‚úÖ Ha", "‚ùå Yo‚Äòq"].includes(text)) {
      console.log("ü©∫ Kasallik hali belgilanmagan. askIllnessQuestion() chaqirildi.");
      return this.askIllnessQuestion(ctx);
    }

    if (text === "‚úÖ Ha") {
      console.log("‚úÖ Ha tanlandi ‚Äî kasallik nomi kutilmoqda.");
      this.kasallikMap.set(user_id, true);
      return ctx.reply(
        "üìù Farzandingizda qanday kasallik borligini yozing:",
        Markup.removeKeyboard()
      );
    }

    if (text === "‚ùå Yo‚Äòq") {
      console.log("‚ùå Yo‚Äòq tanlandi ‚Äî sog'lom deb belgilanyapti.");
      user.illness = "sog'lom";
      await user.save();
      return ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.");
    }

    if (this.kasallikMap.has(user_id)) {
      console.log("üìù Kasallik nomi kiritilyapti:", text);
      user.illness = text;
      await user.save();
      this.kasallikMap.delete(user_id);
      await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
    }

    // Barcha maydonlar to‚Äòldirilganmi
    if (
      user.phone_number &&
      user.name &&
      user.location &&
      user.illness
    ) {
      console.log("üéâ Barcha bosqichlar tugadi.");
      return ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
    }

    // Qolgan holatlar
    console.log("‚ö†Ô∏è Ma'lumot to‚Äòliq emas. Qayta tekshiruv.");
    if (!user.phone_number) return this.start(ctx);
    if (!user.name) return this.onName(ctx);
    if (!user.location) return this.onLocation(ctx);
    if (!user.illness) return this.askIllnessQuestion(ctx);

  } catch (error) {
    console.error("üö® handleText xatolik:", error);
    return ctx.reply(
      "‚ö†Ô∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring."
    );
  }
}


}
//-------------------



so many mistece have but work

// import { Injectable } from "@nestjs/common";
// import { Context } from "telegraf";
// import { InjectModel } from "@nestjs/mongoose";
// import { Model } from "mongoose";
// import { Bot, BotDocument } from "./schema/bot.schema";

// @Injectable()
// export class BotService {
//   private kasallikMap = new Map<number, boolean>();

//   constructor(
//     @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
//   ) {}

//   async start(ctx: Context) {
//     await ctx.reply("Assalomu alaykum! Iltimos telefon raqamingizni yuboring", {
//       reply_markup: {
//         keyboard: [
//           [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
//         ],
//         resize_keyboard: true,
//         one_time_keyboard: true,
//       },
//     });
//   }

//   async onContact(ctx: Context) {
//     const user_id = ctx.from?.id;
//     if (!user_id || !ctx.message) return;

//     if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
//       const contact = ctx.message.contact;
//       let user = await this.botModel.findOne({ user_id });

//       if (user) {
//         user.phone_number = contact.phone_number;
//         await user.save();
//       } else {
//         await this.botModel.create({
//           user_id,
//           phone_number: contact.phone_number,
//           user_name: ctx.from?.username ?? "",
//           first_name: ctx.from?.first_name ?? "",
//           last_name: ctx.from?.last_name ?? "",
//           lang: ctx.from?.language_code ?? "",
//         });
//       }

//       await ctx.reply("‚úÖ Endi ismingizni yuboring", {
//         reply_markup: { remove_keyboard: true },
//       });
//     } else {
//       await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
//     }
//   }

//   async onName(ctx: Context) {
//     const user_id = ctx.from?.id;
//     if (!user_id || !ctx.message || !("text" in ctx.message)) return;
//     const text = ctx.message.text.trim();

//     if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
//       return ctx.reply("‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing.");
//     }

//     const user = await this.botModel.findOne({ user_id });
//     if (!user) return;

//     user.name = text;
//     await user.save();

//     await ctx.reply(`‚úÖ ${text} ismingiz saqlandi.`);
//     await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
//       reply_markup: {
//         keyboard: [
//           [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//         ],
//         resize_keyboard: true,
//         one_time_keyboard: true,
//       },
//     });
//   }

//   async onLocation(ctx: Context) {
//     const user_id = ctx.from?.id;
//     if (!user_id || !ctx.message) return;

//     const user = await this.botModel.findOne({ user_id });
//     if (!user) return ctx.reply("Iltimos, avval /start buyrug'ini bosing.");

//     if ("location" in ctx.message && ctx.message.location) {
//       const { latitude, longitude } = ctx.message.location;
//       user.location = `${latitude},${longitude}`;
//       await user.save();

//       await ctx.reply("‚úÖ Joylashuvingiz saqlandi.", {
//         reply_markup: { remove_keyboard: true },
//       });
//       return this.askIllnessQuestion(ctx);
//     }

//     return ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
//       reply_markup: {
//         keyboard: [
//           [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//         ],
//         resize_keyboard: true,
//         one_time_keyboard: true,
//       },
//     });
//   }

//   async askIllnessQuestion(ctx: Context) {
//     return ctx.reply("ü©∫ Farzandingizda hozirda biron kasallik bormi?", {
//       reply_markup: {
//         keyboard: [["‚úÖ Ha", "‚ùå Yo‚Äòq"]],
//         resize_keyboard: true,
//         one_time_keyboard: true,
//       },
//     });
//   }

//   async handleText(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!ctx.message || !("text" in ctx.message)) return;

//       const text = ctx.message.text.trim();
//       console.log("üì© Kiritilgan matn:", text);

//       if (!user_id || !text) return;

//       const user = await this.botModel.findOne({ user_id });
//       console.log("üîé Foydalanuvchi:", user);

//       if (!user) return this.start(ctx);
//       if (!user.phone_number) return this.start(ctx);
//       if (!user.name) return this.onName(ctx);
//       if (!user.location) return this.onLocation(ctx);

//       if (!user.illness && !["‚úÖ Ha", "‚ùå Yo‚Äòq"].includes(text)) {
//         return this.askIllnessQuestion(ctx);
//       }

//       if (text === "‚úÖ Ha") {
//         this.kasallikMap.set(user_id, true);
//         return ctx.reply(
//           "üìù Farzandingizda qanday kasallik borligini yozing:",
//           { reply_markup: { remove_keyboard: true } }
//         );
//       }

//       if (text === "‚ùå Yo‚Äòq") {
//         user.illness = "sog'lom";
//         await user.save();
//         return ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.");
//       }

//       if (this.kasallikMap.has(user_id)) {
//         user.illness = text;
//         await user.save();
//         this.kasallikMap.delete(user_id);
//         await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
//       }

//       if (
//         user.phone_number &&
//         user.name &&
//         user.location &&
//         user.illness
//       ) {
//         return ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
//       }

//       if (!user.phone_number) return this.start(ctx);
//       if (!user.name) return this.onName(ctx);
//       if (!user.location) return this.onLocation(ctx);
//       if (!user.illness) return this.askIllnessQuestion(ctx);

//     } catch (error) {
//       console.error("üö® handleText xatolik:", error);
//       return ctx.reply(
//         "‚ö†Ô∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring."
//       );
//     }
//   }
// }

//-----------


not perfect but work 






import { Injectable } from "@nestjs/common";
import { Context } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  async start(ctx: Context) {
    try {
      await ctx.reply("Assalomu alaykum! Iltimos telefon raqamingizni yuboring", {
        reply_markup: {
          keyboard: [
            [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Start error:", error);
    }
  }

  async onContact(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) return;

      if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
        const contact = ctx.message.contact;
        let user = await this.botModel.findOne({ user_id });

        if (user) {
          user.phone_number = contact.phone_number;
          await user.save();
        } else {
          await this.botModel.create({
            user_id,
            phone_number: contact.phone_number,
            user_name: ctx.from?.username ?? "",
            first_name: ctx.from?.first_name ?? "",
            last_name: ctx.from?.last_name ?? "",
            lang: ctx.from?.language_code ?? "",
          });
        }

        await ctx.reply("‚úÖ Endi ismingizni yuboring", {
          reply_markup: { remove_keyboard: true },
        });
      } else {
        await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
      }
    } catch (error) {
      console.error("Contact error:", error);
      await ctx.reply("‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async onName(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message || !("text" in ctx.message)) return;
      const text = ctx.message.text.trim();

      if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
        return await ctx.reply("‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing.");
      }

      const user = await this.botModel.findOne({ user_id });
      if (!user) return;

      user.name = text;
      await user.save();

      await ctx.reply(`‚úÖ ${text} ismingiz saqlandi.`);
      await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Name error:", error);
      await ctx.reply("‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async onLocation(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) return;

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await ctx.reply("Iltimos, avval /start buyrug'ini bosing.");

      if ("location" in ctx.message && ctx.message.location) {
        const { latitude, longitude } = ctx.message.location;
        user.location = `${latitude},${longitude}`;
        await user.save();

        await ctx.reply("‚úÖ Joylashuvingiz saqlandi.", {
          reply_markup: { remove_keyboard: true },
        });
        return await this.askIllnessQuestion(ctx);
      }

      await ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Location error:", error);
      await ctx.reply("‚ö†Ô∏è Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async askIllnessQuestion(ctx: Context) {
    try {
      await ctx.reply("ü©∫ Farzandingizda hozirda biron kasallik bormi?", {
        reply_markup: {
          keyboard: [["‚úÖ Ha", "‚ùå Yo'q"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Ask illness error:", error);
    }
  }

  async handleText(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!ctx.message || !("text" in ctx.message)) return;

      const text = ctx.message.text.trim();
      console.log("üì© Kiritilgan matn:", text);

      if (!user_id || !text) return;

      const user = await this.botModel.findOne({ user_id });
      console.log("üîé Foydalanuvchi:", user);

      if (!user) return await this.start(ctx);
      if (!user.phone_number) return await this.start(ctx);
      if (!user.name) return await this.onName(ctx);
      if (!user.location) return await this.onLocation(ctx);

      if (!user.illness && !["‚úÖ Ha", "‚ùå Yo'q"].includes(text)) {
        return await this.askIllnessQuestion(ctx);
      }

      if (text === "‚úÖ Ha") {
        this.kasallikMap.set(user_id, true);
        return await ctx.reply(
          "üìù Farzandingizda qanday kasallik borligini yozing:",
          { reply_markup: { remove_keyboard: true } }
        );
      }

      if (text === "‚ùå Yo'q") {
        user.illness = "sog'lom";
        await user.save();
        return await ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.");
      }

      if (this.kasallikMap.has(user_id)) {
        user.illness = text;
        await user.save();
        this.kasallikMap.delete(user_id);
        await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
      }

      if (user.phone_number && user.name && user.location && user.illness) {
        return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
      }

      if (!user.phone_number) return await this.start(ctx);
      if (!user.name) return await this.onName(ctx);
      if (!user.location) return await this.onLocation(ctx);
      if (!user.illness) return await this.askIllnessQuestion(ctx);

    } catch (error) {
      console.error("üö® handleText xatolik:", error);
      await ctx.reply(
        "‚ö†Ô∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
      );
    }
  }
}

//------------




it work but have mistece


import { Injectable } from "@nestjs/common";
import { Context } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  async start(ctx: Context) {
    try {
      await ctx.reply("Assalomu alaykum! Iltimos telefon raqamingizni yuboring", {
        reply_markup: {
          keyboard: [
            [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Start error:", error);
      await ctx.reply("‚ö†Ô∏è Botni ishga tushirishda xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async onContact(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) return;

      if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
        const contact = ctx.message.contact;
        let user = await this.botModel.findOne({ user_id });

        if (user) {
          user.phone_number = contact.phone_number;
          await user.save();
        } else {
          user = await this.botModel.create({
            user_id,
            phone_number: contact.phone_number,
            user_name: ctx.from?.username ?? "",
            first_name: ctx.from?.first_name ?? "",
            last_name: ctx.from?.last_name ?? "",
            lang: ctx.from?.language_code ?? "",
          });
        }

        await ctx.reply("‚úÖ Endi ismingizni yuboring", {
          reply_markup: { remove_keyboard: true },
        });
      } else {
        await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
      }
    } catch (error) {
      console.error("Contact error:", error);
      await ctx.reply("‚ö†Ô∏è Telefon raqamni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async onName(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message || !("text" in ctx.message)) return;
      const text = ctx.message.text.trim();

      if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
        return await ctx.reply("‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing (kamida 2 belgi).");
      }

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      user.name = text;
      await user.save();

      await ctx.reply(`‚úÖ ${text} ismingiz saqlandi.`);
      await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Name error:", error);
      await ctx.reply("‚ö†Ô∏è Ismni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async onLocation(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) return;

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      if ("location" in ctx.message && ctx.message.location) {
        const { latitude, longitude } = ctx.message.location;
        user.location = `${latitude},${longitude}`;
        await user.save();

        await ctx.reply("‚úÖ Joylashuvingiz saqlandi.", {
          reply_markup: { remove_keyboard: true },
        });
        return await this.askIllnessQuestion(ctx);
      }

      await ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Location error:", error);
      await ctx.reply("‚ö†Ô∏è Joylashuvni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async askIllnessQuestion(ctx: Context) {
    try {
      await ctx.reply("ü©∫ Farzandingizda hozirda biron kasallik bormi?", {
        reply_markup: {
          keyboard: [["‚úÖ Ha", "‚ùå Yo'q"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Ask illness error:", error);
    }
  }

  async handleText(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!ctx.message || !("text" in ctx.message)) return;

      const text = ctx.message.text.trim();
      console.log("Received text:", text, "from user:", user_id);

      if (!user_id || !text) return;

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      // Handle illness question response
      if (!user.illness && (text === "‚úÖ Ha" || text === "‚ùå Yo'q" || text === "‚ùå Yo ªq")) {
        if (text === "‚úÖ Ha") {
          this.kasallikMap.set(user_id, true);
          return await ctx.reply(
            "üìù Farzandingizda qanday kasallik borligini yozing:",
            { reply_markup: { remove_keyboard: true } }
          );
        } else {
          user.illness = "sog'lom";
          await user.save();
          this.kasallikMap.delete(user_id);
          return await ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.");
        }
      }

      // Handle illness description
      if (this.kasallikMap.has(user_id)) {
        if (text.length < 2) {
          return await ctx.reply("‚ùóÔ∏è Iltimos, kamida 2 ta belgidan iborat kasallik nomini yozing");
        }
        
        user.illness = text;
        await user.save();
        this.kasallikMap.delete(user_id);
        return await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
      }

      // Check if we need to ask for missing information
      if (!user.phone_number) return await this.start(ctx);
      if (!user.name) return await this.onName(ctx);
      if (!user.location) return await this.onLocation(ctx);
      if (!user.illness) return await this.askIllnessQuestion(ctx);

      // If all information is complete
      if (user.phone_number && user.name && user.location && user.illness) {
        return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
      }

    } catch (error) {
      console.error("Error in handleText:", error);
      await ctx.reply("‚ö†Ô∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.");
    }
  }


}


//----------------------------





with davlat aka


// import { Injectable } from "@nestjs/common";
// import { Context } from "telegraf";
// import { InjectModel } from "@nestjs/mongoose";
// import { Model } from "mongoose";
// import { Bot, BotDocument } from "./schema/bot.schema";

// @Injectable()
// export class BotService {
//   private kasallikMap = new Map<number, boolean>();

//   constructor(
//     @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
//   ) {}

//   async start(ctx: Context) {
//     try {
//       await ctx.reply("Assalomu alaykum! Iltimos telefon raqamingizni yub augmenter", {
//         reply_markup: {
//           keyboard: [
//             [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
//           ],
//           resize_keyboard: true,
//           one_time_keyboard: true,
//         },
//       });
//     } catch (error) {
//       console.error("Start error:", error);
//       await ctx.reply("‚ö†Ô∏è Botni ishga tushirishda xatolik. Iltimos, qaytadan urinib ko'ring.");
//     }
//   }

//   async onContact(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!user_id || !ctx.message) return;

//       if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
//         const contact = ctx.message.contact;
//         let user = await this.botModel.findOne({ user_id });

//         if (user) {
//           user.phone_number = contact.phone_number;
//           await user.save();
//         } else {
//           user = await this.botModel.create({
//             user_id,
//             phone_number: contact.phone_number,
//             user_name: ctx.from?.username ?? "",
//             first_name: ctx.from?.first_name ?? "",
//             last_name: ctx.from?.last_name ?? "",
//             lang: ctx.from?.language_code ?? "",
//           });
//         }

//         await ctx.reply("‚úÖ Endi ismingizni yuboring", {
//           reply_markup: { remove_keyboard: true },
//         });
//       } else {
//         await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
//       }
//     } catch (error) {
//       console.error("Contact error:", error);
//       await ctx.reply("‚ö†Ô∏è Telefon raqamni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
//     }
//   }

//   async onName(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!user_id || !ctx.message || !("text" in ctx.message)) return;
//       const text = ctx.message.text.trim();

//       if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
//         return await ctx.reply("‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing (kamida 2 belgi).");
//       }

//       const user = await this.botModel.findOne({ user_id });
//       if (!user) return await this.start(ctx);

//       user.name = text;
//       await user.save();

//       await ctx.reply(`‚úÖ ${text} ismingiz saqlandi.`);
//       await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
//         reply_markup: {
//           keyboard: [
//             [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//           ],
//           resize_keyboard: true,
//           one_time_keyboard: true,
//         },
//       });
//     } catch (error) {
//       console.error("Name error:", error);
//       await ctx.reply("‚ö†Ô∏è Ismni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
//     }
//   }

//   async onLocation(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!user_id || !ctx.message) return;

//       const user = await this.botModel.findOne({ user_id });
//       if (!user) return await this.start(ctx);

//       if ("location" in ctx.message && ctx.message.location) {
//         const { latitude, longitude } = ctx.message.location;
//         user.location = `${latitude},${longitude}`;
//         await user.save();

//         await ctx.reply("‚úÖ Joylashuvingiz saqlandi.", {
//           reply_markup: { remove_keyboard: true },
//         });
//         return await this.askIllnessQuestion(ctx);
//       }

//       await ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
//         reply_markup: {
//           keyboard: [
//             [{ text: "üìç Joylashuvni yuborish", request_location: true }],
//           ],
//           resize_keyboard: true,
//           one_time_keyboard: true,
//         },
//       });
//     } catch (error) {
//       console.error("Location error:", error);
//       await ctx.reply("‚ö†Ô∏è Joylashuvni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
//     }
//   }

//   async askIllnessQuestion(ctx: Context) {
//     try {
//       await ctx.reply("ü©∫ Farzandingizda hozirda biron kasallik bormi?", {
//         reply_markup: {
//           keyboard: [["‚úÖ Ha", "‚ùå Yo'q"]],
//           resize_keyboard: true,
//           one_time_keyboard: true,
//         },
//       });
//     } catch (error) {
//       console.error("Ask illness error:", error);
//       await ctx.reply("‚ö†Ô∏è Kasallik so'rovida xatolik. Iltimos, qaytadan urinib ko'ring.");
//     }
//   }

//   async handleText(ctx: Context) {
//     try {
//       const user_id = ctx.from?.id;
//       if (!ctx.message || !("text" in ctx.message)) return;

//       const text = ctx.message.text.trim();
//       console.log("Received text:", text, "from user:", user_id);

//       if (!user_id || !text) return;

//       const user = await this.botModel.findOne({ user_id });
//       if (!user) return await this.start(ctx);

//       // Check if all required fields are already set
//       if (user.phone_number && user.name && user.location && user.illness) {
//         return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
//       }

//       // Handle illness question response
//       if (!user.illness && (text === "‚úÖ Ha" || text === "‚ùå Yo'q" || text === "‚ùå Yo ªq")) {
//         if (text === "‚úÖ Ha") {
//           this.kasallikMap.set(user_id, true);
//           return await ctx.reply(
//             "üìù Farzandingizda qanday kasallik borligini yozing:",
//             { reply_markup: { remove_keyboard: true } }
//           );
//         } else {
//           user.illness = "sog'lom";
//           await user.save();
//           this.kasallikMap.delete(user_id);
//           await ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.");
//           // Check if all fields are complete after saving illness
//           if (user.phone_number && user.name && user.location && user.illness) {
//             return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
//           }
//           return;
//         }
//       }

//       // Handle illness description
//       if (this.kasallikMap.has(user_id)) {
//         if (text.length < 2) {
//           return await ctx.reply("‚ùóÔ∏è Iltimos, kamida 2 ta belgidan iborat kasallik nomini yozing");
//         }

//         user.illness = text;
//         await user.save();
//         this.kasallikMap.delete(user_id);
//         await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
//         // Check if all fields are complete after saving illness
//         if (user.phone_number && user.name && user.location && user.illness) {
//           return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
//         }
//         return;
//       }

//       // Check for missing information and guide user to the next step
//       if (!user.phone_number) return await this.start(ctx);
//       if (!user.name) return await this.onName(ctx);
//       if (!user.location) return await this.onLocation(ctx);
//       if (!user.illness) return await this.askIllnessQuestion(ctx);

//     } catch (error) {
//       console.error("Error in handleText:", error);
//       await ctx.reply("‚ö†Ô∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.");
//     }
//   }
// }






import { Injectable } from "@nestjs/common";
import { Context } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  async start(ctx: Context) {
    try {
      await ctx.reply("Assalomu alaykum! Iltimos telefon raqamingizni yuboring", {
        reply_markup: {
          keyboard: [
            [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Start error:", error);
      await ctx.reply("‚ö†Ô∏è Botni ishga tushirishda xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async onContact(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) return;

      if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
        const contact = ctx.message.contact;
        let user = await this.botModel.findOne({ user_id });

        if (user) {
          user.phone_number = contact.phone_number;
          await user.save();
        } else {
          user = await this.botModel.create({
            user_id,
            phone_number: contact.phone_number,
            user_name: ctx.from?.username ?? "",
            first_name: ctx.from?.first_name ?? "",
            last_name: ctx.from?.last_name ?? "",
            lang: ctx.from?.language_code ?? "",
          });
        }

        await ctx.reply("‚úÖ Endi ismingizni yuboring", {
          reply_markup: { remove_keyboard: true },
        });
      } else {
        await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
      }
    } catch (error) {
      console.error("Contact error:", error);
      await ctx.reply("‚ö†Ô∏è Telefon raqamni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async onName(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message || !("text" in ctx.message)) return;
      const text = ctx.message.text.trim();

      if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
        return await ctx.reply("‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing (kamida 2 belgi).");
      }

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      user.name = text;
      await user.save();

      await ctx.reply(`‚úÖ ${text} ismingiz saqlandi.`);
      await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Name error:", error);
      await ctx.reply("‚ö†Ô∏è Ismni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async onLocation(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) return;

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      if ("location" in ctx.message && ctx.message.location) {
        const { latitude, longitude } = ctx.message.location;
        user.location = `${latitude},${longitude}`;
        await user.save();

        await ctx.reply("‚úÖ Joylashuvingiz saqlandi.", {
          reply_markup: { remove_keyboard: true },
        });
        return await this.askIllnessQuestion(ctx);
      }

      await ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Location error:", error);
      await ctx.reply("‚ö†Ô∏è Joylashuvni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  async askIllnessQuestion(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id) return;

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      // Skip if registration is already complete
      if (user.phone_number && user.name && user.location && user.illness) {
        return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
      }

      await ctx.reply("ü©∫ Farzandingizda hozirda biron kasallik bormi?", {
        reply_markup: {
          keyboard: [["‚úÖ Ha", "‚ùå Yo'q"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Ask illness error:", error);
      await ctx.reply("‚ö†Ô∏è Kasallik so'rovida xatolik. Iltimos, qaytadan urinib ko'ring.");
    }
  }

  // async handleText(ctx: Context) {
  //   try {
  //     const user_id = ctx.from?.id;
  //     if (!ctx.message || !("text" in ctx.message) || !user_id) return;

  //     const text = ctx.message.text.trim();
  //     console.log("Received text:", text, "from user:", user_id);

  //     const user = await this.botModel.findOne({ user_id });
  //     if (!user) return await this.start(ctx);

  //     // Check if registration is already complete
  //     if (user.phone_number && user.name && user.location && user.illness) {
  //       return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
  //     }

  //     // Handle illness question response
  //     if (!user.illness && (text === "‚úÖ Ha" || text === "‚ùå Yo'q")) {
  //       if (text === "‚úÖ Ha") {
  //         this.kasallikMap.set(user_id, true);
  //         return await ctx.reply(
  //           "üìù Farzandingizda qanday kasallik borligini yozing:",
  //           { reply_markup: { remove_keyboard: true } }
  //         );
  //       } else {
  //         user.illness = "sog'lom";
  //         await user.save();
  //         // this.kasallikMap.delete(user_id);
  //         // await ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.");
  //         // // Check if registration is complete
  //         // if (user.phone_number && user.name && user.location && user.illness) {
  //         //   return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
  //         // }
  //         return;
  //       }
  //     }

  //     // Handle illness description
  //     // if (this.kasallikMap.has(user_id)) {
  //     //   if (text.length < 2) {
  //     //     return await ctx.reply("‚ùóÔ∏è Iltimos, kamida 2 ta belgidan iborat kasallik nomini yozing");
  //     //   }

  //     //   user.illness = text;
  //     //   await user.save();
  //     //   this.kasallikMap.delete(user_id);
  //     //   await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
  //     //   // Check if registration is complete
  //     //   if (user.phone_number && user.name && user.location && user.illness) {
  //     //     return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
  //     //   }
  //     //   return;
  //     // }

  //     // Guide user to the next missing step
  //     if (!user.phone_number) return await this.start(ctx);
  //     if (!user.name) return await this.onName(ctx);
  //     if (!user.location) return await this.onLocation(ctx);
  //     if (!user.illness) return await this.askIllnessQuestion(ctx);

  //   } catch (error) {
  //     console.error("Error in handleText:", error);
  //     await ctx.reply("‚ö†Ô∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.");
  //   }
  // }


  async onNo (ctx: Context){
    console.log(ctx.message)
  }

async handleText(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!ctx.message || !("text" in ctx.message) || !user_id) return;

      const text = ctx.message.text.trim();
      console.log("Received text:", text, "from user:", user_id);

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      // Handle illness question response
      // if (user.name == 'illness') {
      //   if (text === "‚úÖ Ha" || text === "‚ùå Yo'q") {
      //     if (text === "‚úÖ Ha") {
      //       this.kasallikMap.set(user_id, true);
      //       user.name = 'illness'
      //       await user.save()
      //       await ctx.reply(
      //         "üìù Farzandingizda qanday kasallik borligini yozing:",
      //         { reply_markup: { remove_keyboard: true } }
      //       );
      //     } else {
      //       user.illness = "sog'lom"; // Bu yerda ilgari "illness" deb yozilgan edi
      //       await user.save();
      //       await ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.");
      //     }
      //     return;
      //   } else {
      //     // Agar foydalanuvchi "Ha" yoki "Yo'q" emas yozsa
      //     await this.askIllnessQuestion(ctx);
      //     return;
      //   }
      // }


      // if(user.name == "illness"){
      //   user.illness = ctx.message.text
      //   await user.save()
      //   await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`)
      // }

      // Kasallik nomini qabul qilish
      if (this.kasallikMap.get(user_id) && text.length >= 2) {
        user.illness = text;
        await user.save();
        this.kasallikMap.delete(user_id);
        await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
        return;
      }

      // Keyingi qadamlarga yo'naltirish
      if (!user.phone_number) {
        await this.start(ctx);
      } else if (!user.name) {
        await this.onName(ctx);
      } else if (!user.location) {
        await this.onLocation(ctx);
      } else if (!user.illness) {
        await this.askIllnessQuestion(ctx);
      } else {
        await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
      }

    } catch (error) {
      console.error("Error in handleText:", error);
      if (error instanceof Error) {
        await ctx.reply(`‚ö†Ô∏è Xatolik: ${error.message}`);
      } else {
        await ctx.reply("‚ö†Ô∏è Noma'lum xatolik yuz berdi");
      }
    }
  }


}




//--------------------------------








import { Injectable } from "@nestjs/common";
import { Context, Markup } from "telegraf";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { Bot, BotDocument } from "./schema/bot.schema";

@Injectable()
export class BotService {
  private kasallikMap = new Map<number, boolean>();

  constructor(
    @InjectModel(Bot.name) private readonly botModel: Model<BotDocument>
  ) {}

  async start(ctx: Context) {
    try {
      // await ctx.reply(
      //   "Assalomu alaykum! Iltimos telefon raqamingizni yuboring",
      //   {
      //     reply_markup: {
      //       keyboard: [
      //         [{ text: "üìû Telefon raqamni yuborish", request_contact: true }],
      //       ],
      //       resize_keyboard: true,
      //       one_time_keyboard: true,
      //     },
      //   }
      // );
     

            const user_id = ctx.from?.id;
      const user = await this.botModel.findOne({user_id});
      if (!user) {
        await this.botModel.create({
          user_id: user_id!,
          user_name: ctx.from?.username!,
          first_name: ctx.from?.first_name!,
          last_name: ctx.from?.last_name!,
          lang: ctx.from?.language_code!,
        });

        await ctx.replyWithHTML(
          `Iltimos, <b> üìû Telefon raqamni yuborish</b> tugmasini bosing`,
          {
            ...Markup.keyboard([
              [Markup.button.contactRequest("Telefon raqamni yuborish")],
            ])
              .oneTime()
              .resize(),
          }
        );
      } else if (!user.phone_number) {
        await ctx.replyWithHTML(
          `Iltimos, <b>Telefon raqamni yuborish</b> tugmasini bosing`,
          {
            ...Markup.keyboard([
              [Markup.button.contactRequest("Telefon raqamni yuborish")],
            ])
              .oneTime()
              .resize(),
          }
        );
    } else {
        await ctx.replyWithHTML(
          "Safiya Baby Spa botiga hush kelibsiz üëã",
          { ...Markup.removeKeyboard() }
        );
      }
   } catch (error) {
      console.error("Start error:", error);
      await ctx.reply(
        "‚ö†Ô∏è Botni ishga tushirishda xatolik. Iltimos, qaytadan urinib ko'ring."
      );
    }
  }

  async onContact(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) return;

      if ("contact" in ctx.message && ctx.message.contact?.phone_number) {
        const contact = ctx.message.contact;
        let user = await this.botModel.findOne({ user_id });

        if (user) {
          user.phone_number = contact.phone_number;
          await user.save();
        } else {
          user = await this.botModel.create({
            user_id,
            phone_number: contact.phone_number,
            user_name: ctx.from?.username ?? "",
            first_name: ctx.from?.first_name ?? "",
            last_name: ctx.from?.last_name ?? "",
            lang: ctx.from?.language_code ?? "",
          });
        }

        await ctx.reply("‚úÖ Endi ismingizni yuboring", {
          reply_markup: { remove_keyboard: true },
        });
      } else {
        await ctx.reply("‚ùóÔ∏è Telefon raqami aniqlanmadi.");
      }
    } catch (error) {
      console.error("Contact error:", error);
      await ctx.reply(
        "‚ö†Ô∏è Telefon raqamni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring."
      );
    }
  }

  async onName(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message || !("text" in ctx.message)) return;
      const text = ctx.message.text.trim();

      if (!/^[a-zA-Z\u0400-\u04FF\s'-]{2,}$/.test(text)) {
        return await ctx.reply(
          "‚ùóÔ∏è Iltimos, faqat harflardan iborat ismingizni yozing (kamida 2 belgi)."
        );
      }

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      user.name = text;
      await user.save();

      await ctx.reply(`‚úÖ ${text} ismingiz saqlandi.`);
      await ctx.reply("üìç Endi joylashuvingizni yuboring:", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Name error:", error);
      await ctx.reply(
        "‚ö†Ô∏è Ismni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring."
      );
    }
  }

  async onLocation(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!user_id || !ctx.message) return;

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      if ("location" in ctx.message && ctx.message.location) {
        const { latitude, longitude } = ctx.message.location;
        user.location = `${latitude},${longitude}`;
        await user.save();

        await ctx.reply("‚úÖ Joylashuvingiz saqlandi.", {
          reply_markup: { remove_keyboard: true },
        });
        return await this.askIllnessQuestion(ctx);
      }

      await ctx.reply("‚ùóÔ∏è Iltimos, tugmani bosib joylashuv yuboring!", {
        reply_markup: {
          keyboard: [
            [{ text: "üìç Joylashuvni yuborish", request_location: true }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Location error:", error);
      await ctx.reply(
        "‚ö†Ô∏è Joylashuvni qabul qilishda xatolik. Iltimos, qaytadan urinib ko'ring."
      );
    }
  }

  async askIllnessQuestion(ctx: Context) {
    try {
      await ctx.reply("ü©∫ Farzandingizda hozirda biron kasallik bormi?", {
        reply_markup: {
          keyboard: [["‚úÖ Ha", "‚ùå Yo'q"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error("Ask illness error:", error);
    }
  }

  async handleText(ctx: Context) {
    try {
      const user_id = ctx.from?.id;
      if (!ctx.message || !("text" in ctx.message)) return;

      const text = ctx.message.text.trim();
      console.log("Received text:", text, "from user:", user_id);

      if (!user_id || !text) return;

      const user = await this.botModel.findOne({ user_id });
      if (!user) return await this.start(ctx);

      // Handle illness question response
      if (
        !user.illness &&
        (text === "‚úÖ Ha" || text === "‚ùå Yo'q" || text === "‚ùå Yo ªq")
      ) {
        if (text === "‚úÖ Ha") {
          this.kasallikMap.set(user_id, true);
          return await ctx.reply(
            "üìù Farzandingizda qanday kasallik borligini yozing:",
            { reply_markup: { remove_keyboard: true } }
          );
        } else {
          user.illness = "sog'lom";
          await user.save();
          this.kasallikMap.delete(user_id);
          return await ctx.reply("‚úÖ Farzandingiz sog'lom deb belgilandi.");
        }
      }

      // Handle illness description
      if (this.kasallikMap.has(user_id)) {
        if (text.length < 2) {
          return await ctx.reply(
            "‚ùóÔ∏è Iltimos, kamida 2 ta belgidan iborat kasallik nomini yozing"
          );
        }

        user.illness = text;
        await user.save();
        this.kasallikMap.delete(user_id);
        return await ctx.reply(`‚úÖ Kasallik saqlandi: ${text}`);
      }

      // Check if we need to ask for missing information
      if (!user.phone_number) return await this.start(ctx);
      if (!user.name) return await this.onName(ctx);
      if (!user.location) return await this.onLocation(ctx);
      if (!user.illness) return await this.askIllnessQuestion(ctx);

      // If all information is complete
      if (user.phone_number && user.name && user.location && user.illness) {
        return await ctx.reply("üéâ Siz muvaffaqiyatli ro'yxatdan o'tdingiz!");
      }
    } catch (error) {
      console.error("Error in handleText:", error);
      await ctx.reply(
        "‚ö†Ô∏è Ichki xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
      );
    }
  }
}
